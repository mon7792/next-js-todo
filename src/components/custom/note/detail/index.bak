// "use client";
// import { useState, useTransition, useOptimistic as usOpt } from "react";
// import { Card, CardContent, CardDescription } from "@/components/ui/card";

// import { Note } from "@/types/note";

// import Image from "next/image";

// type NoteDetailProps = {
//   note: Note;
// };

// import { Label } from "@/components/ui/label";
// import { Switch } from "@/components/ui/switch";

// // sample async function with timmer of 2 sec
// const asyncFunction = () => {
//   return new Promise((resolve) =>
//     setTimeout(() => resolve(console.log("asyncFunction started")), 2000)
//   );
// };

// const asyncThrowErrFunction2 = () => {
//   return new Promise((resolve, reject) =>
//     setTimeout(() => reject(console.error("asyncFunction throw erroe")), 2000)
//   );
// }

// export default function NoteDetail({ note }: NoteDetailProps) {

//   const [name, setName] = useState("name");
//   // 1. custom useOptimistic hook
//   // const [optCheck, setOptCheck] = useOptimistic(note.completed as boolean);

//   // 2. experimental useOptimistic hook

//   const [check, setCheck] = useState(note.completed as boolean);
//   const [isPending, startTransition] = useTransition();
//   const toggleOptimistically = async () => {
//     // Optimistically toggle the state

//     startTransition(() => {
//       setCheck(!check);
//     });
//     // PERFORM: async function
//     try {
//     await asyncThrowErrFunction2();
//     } catch (error) {
//       console.log("error catched");
//       console.log(isPending);
//       console.log(check);
//       // If the async function fails, revert the state
      
//       setCheck(check);
//       setName("");
//       console.error(error);
//     }

//     // setCheck(prev => !prev);
//   };

//   return (
//     <Card>
//       <CardContent className="p-4">
//         <div className="flex flex-row-reverse gap-2">
//           <Switch
//             className="data-[state=checked]:bg-green-500"
//             id="completed"
//             defaultChecked={check}
//             checked={check}
//             onCheckedChange={toggleOptimistically}
//           />
//           <Label htmlFor="completed">Status</Label>
//         </div>
//         <CardDescription>{note.description}</CardDescription>
//         {note.receipt && note.receipt.length > 0 && (
//           <Image
//             width={200}
//             height={200}
//             src={note.receipt as string}
//             alt={note.title}
//           />
//         )}
//         <div>{name}</div>

//         <div className="flex flex-row-reverse">
//           {check ? (
//             <div className="w-2 h-2 bg-green-500 rounded-full"></div>
//           ) : (
//             <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
//           )}
//         </div>
//       </CardContent>
//     </Card>
//   );
// }

// function useOptimistic(defaultValue: boolean) {
//   const [state, setState] = useState(defaultValue);

//   const toggleOptimistically = async (asyncFunction: () => Promise<any>) => {
//     // Optimistically toggle the state
//     setState(!state);

//     try {
//       // Execute the async function
//       await asyncFunction();
//       console.log("asyncFunction completed");
//     } catch (error) {
//       // If the async function fails, revert the state
//       setState(state);
//       console.error(error);
//     }
//   };

//   return [state, toggleOptimistically] as const;
// }
